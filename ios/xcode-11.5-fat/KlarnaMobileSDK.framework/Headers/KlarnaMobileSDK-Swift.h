#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KlarnaMobileSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@protocol KlarnaWebView;
@class KlarnaMobileSDKError;

/// An object that will be notified of events happening to the web views <code>KlarnaHybridSDK</code> instance
/// is observing.
/// If you’re performinga hybrid integration, you’ll need to implement an instance of this
/// listener and initialize the <code>KlarnaHybridSDK</code> with it.
/// warning:
/// Make sure you listen to to <code>klarnaFailed(inWebView:withError:)</code> for potential
/// fatal and non-fatal errors. If the error is not fatal, you can call the method again.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK25KlarnaHybridEventListener_")
@protocol KlarnaHybridEventListener
/// Event to notify the merchant app that the supplied web view will present full-screen content
/// that it should be displayed in a full-screen format.
/// \param webView Web view to be presented in fullscreen.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaWillShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify the merchant app that full-screen content in the supplied web view is now
/// being displayed.
/// \param webView Web view that has presented full-screen content.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaDidShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify the merchant’s app that the full-screen content in the following web view
/// will be removed, and the “original” contents will be displayed.
/// \param webView Web view to be restored to original presentation.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaWillHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify merchant that the full-screen content in the web view has been removed and
/// it’s now displaying content in its orignal presentation.
/// \param webView Web biew presenting content in original format.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaDidHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify merchant that an error occured during Hybrid SDK’s usage.
/// \param webView The web view the error occured in.
///
/// \param error Error details.
///
- (void)klarnaFailedInWebView:(id <KlarnaWebView> _Nonnull)webView withError:(KlarnaMobileSDKError * _Nonnull)error;
@end


/// Klarna’s approach to integrating products with a “hybrid” approach: One in which Klarna’s
/// products are presented inside a merchant-owned web view.
SWIFT_CLASS("_TtC15KlarnaMobileSDK15KlarnaHybridSDK")
@interface KlarnaHybridSDK : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol KlarnaHybridSDKEventListener;

@interface KlarnaHybridSDK (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// warning:
/// This initializer is deprecated. Use the new one and just initialize the SDK and
/// add the web view you’ll be using.
/// \param webView A web view (<code>WKWebView</code>) for Klarna’s SDK to operate on.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener that will receive events from the SDK.
///
- (nonnull instancetype)initWithWebView:(id <KlarnaWebView> _Nonnull)webView returnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaHybridSDKEventListener> _Nonnull)eventListener SWIFT_DEPRECATED_MSG("Use the new initializer instead.");
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener that will receive events from the SDK.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaHybridEventListener> _Nonnull)eventListener;
/// Adds a web view that the SDK will keep track of until either the web view or the SDK is
/// dereferenced.
/// You may add multiple web views to the same instance.
/// \param webView Web view that the SDK will keep track of (<code>WKWebView</code>).
///
- (void)addWebView:(id <KlarnaWebView> _Nonnull)webView;
/// Notify the SDK that a new page will load in the provided web view.
/// Call should be perfomed in:
/// <code>webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</code>.
/// \param webView Web view that the SDK will check (<code>WKWebView</code>).
///
- (void)newPageLoadIn:(id <KlarnaWebView> _Nonnull)webView;
/// Notify the SDK that a new page will load in the provided web view.
/// warning:
/// Use <code>newPageLoad</code> from this same class instead.
/// \param webView Web view that the SDK will check (<code>WKWebView</code>).
///
- (void)newPageWillLoadIn:(id <KlarnaWebView> _Nonnull)webView SWIFT_DEPRECATED_MSG("Use the `newPageLoad` instead.");
/// Verify with the SDK whether a request/navigation should be performed in the web view.
/// Checking should be perfomed in:
/// <code>webView(_: decidePolicyFor: decisionHandler:)</code> with the <code>navigationAction</code>’s <code>request</code> property.
/// note:
///
/// If it is a page Klarna recognizes as one of its own (e.g. Klarna’s financing terms), the SDK
/// will return <code>false</code>. You should then block this navigation.
/// If it’s a page Klarna doesn’t recognize, it’ll fall back to returning <code>true</code>. Your app should
/// determine whether it wants to load the URL through its own heuristics.
/// \param request Request the web view will be performing.
///
///
/// returns:
/// Whether the SDK deems that this navigation should be blocked or not.
- (BOOL)shouldFollowNavigationWithRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the SDK’s Device ID for the app install.
/// warning:
/// This method is deprecated. Use the static method from <code>KlarnaMobileSDK</code> with the
/// same name.
///
/// returns:
/// a unique ID, persistent throughout the app’s installation.
+ (NSString * _Nonnull)deviceIdentifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use the method of the same name on KlarnaMobileSDK instead.");
/// To be called when the application is re-opened from a third-party application while the SDK
/// is running.
/// warning:
/// This method is deprecated. The SDK does not require it anymore.
/// \param url URL that is passed in through deep link.
///
/// \param options Additional system-provided parameters (like source application bundle ID)
///
+ (void)handleDeeplinkWithUrl:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options SWIFT_DEPRECATED_MSG("SDK does not need this to be called anymore. Will be removed in future releases.");
@end


/// Your app should listen to SDK events in the from the Hybrid SDK by implementing this protocol.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK28KlarnaHybridSDKEventListener_") SWIFT_DEPRECATED_MSG("Use KlarnaHybridEventListener instead.")
@protocol KlarnaHybridSDKEventListener
/// Event to notify the merchant app that the following web view will present content that
/// should be displayed in a full-screen format.
/// \param webView Web view to be presented in fullscreen.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaHybridSDKWillShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify the merchant app merchant that content that should be presented in
/// full-screen has been displayed.
/// \param webView Web view that has presented full-screen content.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaHybridSDKDidShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify the merchant’s app that the full-screen content in the following web view
/// will be removed, and the “original” contents will be displayed.
/// \param webView Web view to be restored to original presentation.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaHybridSDKWillHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify merchant that the full-screen content in the web view has been removed and
/// it is now displaying “regular” content.
/// \param webView Web View presenting original content.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaHybridSDKDidHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify merchant that an error occured during Hybrid SDK usage.
/// \param webView on which webview the failure happened.
///
/// \param error detail error.
///
- (void)klarnaHybridSDKFailedInWebView:(id <KlarnaWebView> _Nonnull)webView withError:(KlarnaMobileSDKError * _Nonnull)error;
@end

/// Level of logging to system console.
typedef SWIFT_ENUM(NSInteger, KlarnaLoggingLevel, closed) {
/// No logging will occur.
  KlarnaLoggingLevelOff = 0,
/// Errors will be logged. Default.
  KlarnaLoggingLevelError = 1,
/// All messages will be logged.
  KlarnaLoggingLevelVerbose = 2,
};


/// The top level interface for the SDK and all of its components.
/// Common methods for all integrations are provided here.
SWIFT_CLASS("_TtC15KlarnaMobileSDK21KlarnaMobileSDKCommon")
@interface KlarnaMobileSDKCommon : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Set logging level for all SDK integrations.
/// You can observe these logs either through XCode or the MacOS console.
/// The default logging level is <code>error</code>.
/// \param loggingLevel Console log output level.
///
+ (void)setLoggingLevel:(enum KlarnaLoggingLevel)loggingLevel;
/// Provides a device identifier for an app.
/// The string it returns remains constant during the app’s lifetime on the app. The value does
/// not change on updates, but will change on re-installs.
/// The string is a UUID following the RFC 4122 version 4 standard.
///
/// returns:
/// A unique persisted ID string.
+ (NSString * _Nonnull)deviceIdentifier SWIFT_WARN_UNUSED_RESULT;
@end


/// Describes a generic error that occurred within the SDK.
SWIFT_CLASS("_TtC15KlarnaMobileSDK20KlarnaMobileSDKError")
@interface KlarnaMobileSDKError : NSObject
/// Unique name identifying this error.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Description of the error.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Describes whether this error is fatal. This means some part of the flow failed permanently.
@property (nonatomic, readonly) BOOL isFatal;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An SDK error specific to the Klarna Payments component.
SWIFT_CLASS("_TtC15KlarnaMobileSDK18KlarnaPaymentError")
@interface KlarnaPaymentError : KlarnaMobileSDKError
/// If an error isn’t fatal, the SDK will inform you of what fields need to be addressed.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable invalidFields;
/// Action the error occurred during.
@property (nonatomic, readonly, copy) NSString * _Nonnull action;
@end

@class KlarnaPaymentView;

/// An object that will be notified of events happening to a <code>KlarnaPaymentView</code>
/// If you’re integrating Klarna Payments natively, you’ll need to implement an instance of this
/// listener and initialize the <code>KlarnaPaymentView</code> with it.
/// warning:
/// Make sure you listen to to <code>klarnaFailed(inPaymentView:withError:)</code> for potential
/// fatal and non-fatal errors. If the error is not fatal, you can call the method again.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK26KlarnaPaymentEventListener_")
@protocol KlarnaPaymentEventListener
/// The <code>initialize()</code> function for this payment view was successful.
/// You can follow up by calling <code>load()</code> to render details for this method, or if this payment
/// method is already authorized, <code>loadPaymentReview()</code>.
/// \param paymentView The <code>KlarnaPaymentView</code> that was initialized.
///
- (void)klarnaInitializedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// The <code>load()</code> function for this payment view was successful.
/// Payment view should be visible now. If the user chooses to pay with the payment method in
/// this view, call <code>authorize()</code>.
/// \param paymentView The <code>KlarnaPaymentView</code> that was loaded.
///
- (void)klarnaLoadedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// The <code>loadPaymentReview()</code> function for this payment view was successful.
/// Payment view is rendering a description of what the payment method that was authorized.
/// \param paymentView The <code>KlarnaPaymentView</code> that renders a payment review.
///
- (void)klarnaLoadedPaymentReviewWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// An authorization was performed for the payment method in the payment view.
/// If you have an authorization token, you can create an order with your backend at this point.
/// note:
/// This method being called doesn’t necessarily mean that it was successful. You might need
/// to call <code>finalize()</code>, you might need to correct an error or there might be a fatal error.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the authorized payment method.
///
/// \param approved Is the session approved? If true, you should also get an <code>authToken</code>.
///
/// \param authToken Authorization token.
///
/// \param finalizeRequired If true, <code>finalize()</code> needs to be called.
///
- (void)klarnaAuthorizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken finalizeRequired:(BOOL)finalizeRequired;
/// A reauthorization was performed for the payment method in the payment view.
/// If you have an authorization token, you can create an order with your backend at this point.
/// If the order is changed after this point. Call the view’s <code>reauthorize()</code> instead
/// of calling <code>authorize()</code> again.
/// note:
/// This method being called doesn’t mean that it was necessarily successful. If <code>klarnaAuthorized()</code>
/// previously returned true for <code>finalizeRequired</code>, you need to still call <code>finalize()</code>. There
/// might also be an error.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the reauthorized payment method.
///
/// \param approved Is the session reapproved? If true, you should also get a new <code>authToken</code>.
///
/// \param authToken Authorization token. You can use this to create an order.
///
- (void)klarnaReauthorizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken;
/// The session for the payment method in this view has performed a finalize.
/// If it’s approved and you have an authorization token, you can create an order.
/// note:
/// You need to check for the <code>authToken</code> to make sure the session is finalized.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the finalized payment method.
///
/// \param approved Is the session reapproved? If true, you should also get a new <code>authToken</code>.
///
/// \param authToken Authorization token. You can use this to create an order.
///
- (void)klarnaFinalizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken;
/// Called when a Payment View resized internally.
/// Update your constraints (or whatever solution you have) to match the layout.
/// \param paymentView The <code>KlarnaPaymentView</code> that resized.
///
/// \param newHeight The new height in points.
///
- (void)klarnaResizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView to:(CGFloat)newHeight;
/// Called if an error occured during some part of the flow.
/// If the error’s <code>invalidFields</code> property contains field names and the error isn’t fatal, you can:
/// <ol>
///   <li>
///     Prompt the user to get updated info for those fields.
///   </li>
///   <li>
///     Call the same method with those updated fields as additional data.
///   </li>
/// </ol>
/// warning:
/// Errors may or may not be fatal. If the error is fatal the <code>KlarnaPaymentView</code> should not be
/// displayed anymore.
/// \param paymentView The <code>KlarnaPaymentView</code> that the error occured in.
///
/// \param error Error that occurred.
///
- (void)klarnaFailedInPaymentView:(KlarnaPaymentView * _Nonnull)paymentView withError:(KlarnaPaymentError * _Nonnull)error;
@end

@class NSCoder;

SWIFT_CLASS("_TtC15KlarnaMobileSDK17KlarnaPaymentView")
@interface KlarnaPaymentView : UIView
/// Mark <code>init(frame:)</code> as <code>private</code> to prevent it being used to initialize the payment view.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


@interface KlarnaPaymentView (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Payment method category this view will be / is displaying.
@property (nonatomic, readonly, copy) NSString * _Nonnull category;
/// Informs whether this <code>KlarnaPaymentView</code> should be displayed to the customer.
/// True by default. Once it becomes false, it will not become true again.
@property (nonatomic, readonly) BOOL isLoaded;
/// Informs whether this PaymentView’s content is loaded.
/// Will be false until a successful load() call has been performed.
@property (nonatomic, readonly) BOOL isAvalable;
/// Create a Klarna Payment View
/// note:
///
/// Klarna payment view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// note:
///
/// When the payment view is initialized, this initializer <em>wont</em> call <code>initialize()</code>
/// automatically. You need to call initialize yourself.
/// \param category Category of payment methods to be loaded.
///
/// \param delegate A listener object that will receive events from this view.
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category eventListener:(id <KlarnaPaymentEventListener> _Nonnull)eventListener;
/// Initialize the <code>KlarnaPaymentView</code>.
/// note:
///
/// <em>Only</em> call this separately when you get a <code>invalidClientToken</code> error.
/// \param clientToken Client token received from Klarna when creating the session.
///
/// \param returnUrl Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
- (void)initializeWithClientToken:(NSString * _Nonnull)clientToken returnUrl:(NSURL * _Nonnull)returnUrl;
/// Performs a pre-assessment for this payment method category. Loads content into the
/// <code>KlarnaPaymentView</code>.
/// note:
///
/// Any existing content in the view (e.g. if you already called <code>load()</code> before) will be
/// replaced.
/// \param jsonData An optional string with order data to update the session. Formatted as JSON.
///
- (void)loadWithJsonData:(NSString * _Nullable)jsonData;
/// Renders an overview of the payment terms that have been authorized.
/// If your checkout offers the customer an opportunity to review the order after the payment
/// step (e.g. an order review page) it can make sense to present the payment method the customer
/// selected on a previous page.
/// This gives the customer a change to review the payment method and its terms to the user.
/// note:
///
/// Any existing content in the view (e.g. if you already called <code>load()</code> before) will be
/// replaced.
/// note:
///
/// Currently only specific payment methods and countries may be supported.
/// warning:
///
/// The session should be authorized.
- (void)loadPaymentReview;
/// Authorizes the session and evaluates whether an order can be created.
/// Merchant’s delegate will be called with successful/unsuccessful result of authorization.
/// \param autoFinalize An optional flag used to turn off auto-finalization for the direct bank transfer payment method.
///
/// \param jsonData An optional string to update the session. Formatted as JSON.
///
- (void)authorizeWithAutoFinalize:(BOOL)autoFinalize jsonData:(NSString * _Nullable)jsonData;
/// Reauthorizes the session.
/// Call this if session details (order or customer info) have changed after authorization.
/// Merchant’s delegate will be called with successful/unsuccessful result of reauthorization.
/// \param jsonData An optional json string to update the session.
///
- (void)reauthorizeWithJsonData:(NSString * _Nullable)jsonData;
/// Finalizes the session.
/// Call this if you called <code>authorize()</code> with <code>autoFinalize</code> set to <code>false</code> and results in
/// <code>finalizeRequired</code> with a <code>true</code> value.
/// Merchant’s delegate will be called with successful/unsuccessful result of finalization.
/// note:
///
/// Method is called <code>finalise</code> with an “s” to avoid conflicts with the <code>NSObject</code> method of
/// the same name.
/// \param jsonData An optional string to update the session. Formatted as JSON.
///
- (void)finaliseWithJsonData:(NSString * _Nullable)jsonData;
@end


/// General class that envelops WKWebView
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK13KlarnaWebView_")
@protocol KlarnaWebView
@end





@class UIImage;
@class AVCaptureOutput;
@class AVCaptureConnection;
@class NSBundle;

SWIFT_CLASS("_TtC15KlarnaMobileSDK22ScanBaseViewController")
@interface ScanBaseViewController : UIViewController <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)onScannedCardWithNumber:(NSString * _Nonnull)number expiryYear:(NSString * _Nullable)expiryYear expiryMonth:(NSString * _Nullable)expiryMonth scannedImage:(UIImage * _Nullable)scannedImage;
- (void)showCardNumber:(NSString * _Nonnull)number expiry:(NSString * _Nullable)expiry;
- (void)onCameraPermissionDeniedWithShowedPrompt:(BOOL)showedPrompt;
- (BOOL)useCurrentFrameNumberWithErrorCorrectedNumber:(NSString * _Nullable)errorCorrectedNumber currentFrameNumber:(NSString * _Nonnull)currentFrameNumber SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class UIColor;

SWIFT_CLASS("_TtC15KlarnaMobileSDK21UIDotLoadingIndicator")
@interface UIDotLoadingIndicator : UIView
@property (nonatomic) IBInspectable NSInteger dotsCount;
@property (nonatomic) IBInspectable CGFloat dotsRadius;
@property (nonatomic) IBInspectable CGFloat dotsSpacing;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end
























@interface WKWebView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaWebView>
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KlarnaMobileSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@protocol KlarnaWebView;
@class KlarnaMobileSDKError;

/// An object that will be notified of events happening to the web views <code>KlarnaHybridSDK</code> instance
/// is observing.
/// If you’re performinga hybrid integration, you’ll need to implement an instance of this
/// listener and initialize the <code>KlarnaHybridSDK</code> with it.
/// warning:
/// Make sure you listen to to <code>klarnaFailed(inWebView:withError:)</code> for potential
/// fatal and non-fatal errors. If the error is not fatal, you can call the method again.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK25KlarnaHybridEventListener_")
@protocol KlarnaHybridEventListener
/// Event to notify the merchant app that the supplied web view will present full-screen content
/// that it should be displayed in a full-screen format.
/// \param webView Web view to be presented in fullscreen.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaWillShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify the merchant app that full-screen content in the supplied web view is now
/// being displayed.
/// \param webView Web view that has presented full-screen content.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaDidShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify the merchant’s app that the full-screen content in the following web view
/// will be removed, and the “original” contents will be displayed.
/// \param webView Web view to be restored to original presentation.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaWillHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify merchant that the full-screen content in the web view has been removed and
/// it’s now displaying content in its orignal presentation.
/// \param webView Web biew presenting content in original format.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaDidHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify merchant that an error occured during Hybrid SDK’s usage.
/// \param webView The web view the error occured in.
///
/// \param error Error details.
///
- (void)klarnaFailedInWebView:(id <KlarnaWebView> _Nonnull)webView withError:(KlarnaMobileSDKError * _Nonnull)error;
@end


/// Klarna’s approach to integrating products with a “hybrid” approach: One in which Klarna’s
/// products are presented inside a merchant-owned web view.
SWIFT_CLASS("_TtC15KlarnaMobileSDK15KlarnaHybridSDK")
@interface KlarnaHybridSDK : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol KlarnaHybridSDKEventListener;

@interface KlarnaHybridSDK (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// warning:
/// This initializer is deprecated. Use the new one and just initialize the SDK and
/// add the web view you’ll be using.
/// \param webView A web view (<code>WKWebView</code>) for Klarna’s SDK to operate on.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener that will receive events from the SDK.
///
- (nonnull instancetype)initWithWebView:(id <KlarnaWebView> _Nonnull)webView returnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaHybridSDKEventListener> _Nonnull)eventListener SWIFT_DEPRECATED_MSG("Use the new initializer instead.");
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener that will receive events from the SDK.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaHybridEventListener> _Nonnull)eventListener;
/// Adds a web view that the SDK will keep track of until either the web view or the SDK is
/// dereferenced.
/// You may add multiple web views to the same instance.
/// \param webView Web view that the SDK will keep track of (<code>WKWebView</code>).
///
- (void)addWebView:(id <KlarnaWebView> _Nonnull)webView;
/// Notify the SDK that a new page will load in the provided web view.
/// Call should be perfomed in:
/// <code>webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</code>.
/// \param webView Web view that the SDK will check (<code>WKWebView</code>).
///
- (void)newPageLoadIn:(id <KlarnaWebView> _Nonnull)webView;
/// Notify the SDK that a new page will load in the provided web view.
/// warning:
/// Use <code>newPageLoad</code> from this same class instead.
/// \param webView Web view that the SDK will check (<code>WKWebView</code>).
///
- (void)newPageWillLoadIn:(id <KlarnaWebView> _Nonnull)webView SWIFT_DEPRECATED_MSG("Use the `newPageLoad` instead.");
/// Verify with the SDK whether a request/navigation should be performed in the web view.
/// Checking should be perfomed in:
/// <code>webView(_: decidePolicyFor: decisionHandler:)</code> with the <code>navigationAction</code>’s <code>request</code> property.
/// note:
///
/// If it is a page Klarna recognizes as one of its own (e.g. Klarna’s financing terms), the SDK
/// will return <code>false</code>. You should then block this navigation.
/// If it’s a page Klarna doesn’t recognize, it’ll fall back to returning <code>true</code>. Your app should
/// determine whether it wants to load the URL through its own heuristics.
/// \param request Request the web view will be performing.
///
///
/// returns:
/// Whether the SDK deems that this navigation should be blocked or not.
- (BOOL)shouldFollowNavigationWithRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the SDK’s Device ID for the app install.
/// warning:
/// This method is deprecated. Use the static method from <code>KlarnaMobileSDK</code> with the
/// same name.
///
/// returns:
/// a unique ID, persistent throughout the app’s installation.
+ (NSString * _Nonnull)deviceIdentifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use the method of the same name on KlarnaMobileSDK instead.");
/// To be called when the application is re-opened from a third-party application while the SDK
/// is running.
/// warning:
/// This method is deprecated. The SDK does not require it anymore.
/// \param url URL that is passed in through deep link.
///
/// \param options Additional system-provided parameters (like source application bundle ID)
///
+ (void)handleDeeplinkWithUrl:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options SWIFT_DEPRECATED_MSG("SDK does not need this to be called anymore. Will be removed in future releases.");
@end


/// Your app should listen to SDK events in the from the Hybrid SDK by implementing this protocol.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK28KlarnaHybridSDKEventListener_") SWIFT_DEPRECATED_MSG("Use KlarnaHybridEventListener instead.")
@protocol KlarnaHybridSDKEventListener
/// Event to notify the merchant app that the following web view will present content that
/// should be displayed in a full-screen format.
/// \param webView Web view to be presented in fullscreen.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaHybridSDKWillShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify the merchant app merchant that content that should be presented in
/// full-screen has been displayed.
/// \param webView Web view that has presented full-screen content.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaHybridSDKDidShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify the merchant’s app that the full-screen content in the following web view
/// will be removed, and the “original” contents will be displayed.
/// \param webView Web view to be restored to original presentation.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaHybridSDKWillHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify merchant that the full-screen content in the web view has been removed and
/// it is now displaying “regular” content.
/// \param webView Web View presenting original content.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaHybridSDKDidHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify merchant that an error occured during Hybrid SDK usage.
/// \param webView on which webview the failure happened.
///
/// \param error detail error.
///
- (void)klarnaHybridSDKFailedInWebView:(id <KlarnaWebView> _Nonnull)webView withError:(KlarnaMobileSDKError * _Nonnull)error;
@end

/// Level of logging to system console.
typedef SWIFT_ENUM(NSInteger, KlarnaLoggingLevel, closed) {
/// No logging will occur.
  KlarnaLoggingLevelOff = 0,
/// Errors will be logged. Default.
  KlarnaLoggingLevelError = 1,
/// All messages will be logged.
  KlarnaLoggingLevelVerbose = 2,
};


/// The top level interface for the SDK and all of its components.
/// Common methods for all integrations are provided here.
SWIFT_CLASS("_TtC15KlarnaMobileSDK21KlarnaMobileSDKCommon")
@interface KlarnaMobileSDKCommon : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Set logging level for all SDK integrations.
/// You can observe these logs either through XCode or the MacOS console.
/// The default logging level is <code>error</code>.
/// \param loggingLevel Console log output level.
///
+ (void)setLoggingLevel:(enum KlarnaLoggingLevel)loggingLevel;
/// Provides a device identifier for an app.
/// The string it returns remains constant during the app’s lifetime on the app. The value does
/// not change on updates, but will change on re-installs.
/// The string is a UUID following the RFC 4122 version 4 standard.
///
/// returns:
/// A unique persisted ID string.
+ (NSString * _Nonnull)deviceIdentifier SWIFT_WARN_UNUSED_RESULT;
@end


/// Describes a generic error that occurred within the SDK.
SWIFT_CLASS("_TtC15KlarnaMobileSDK20KlarnaMobileSDKError")
@interface KlarnaMobileSDKError : NSObject
/// Unique name identifying this error.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Description of the error.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Describes whether this error is fatal. This means some part of the flow failed permanently.
@property (nonatomic, readonly) BOOL isFatal;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An SDK error specific to the Klarna Payments component.
SWIFT_CLASS("_TtC15KlarnaMobileSDK18KlarnaPaymentError")
@interface KlarnaPaymentError : KlarnaMobileSDKError
/// If an error isn’t fatal, the SDK will inform you of what fields need to be addressed.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable invalidFields;
/// Action the error occurred during.
@property (nonatomic, readonly, copy) NSString * _Nonnull action;
@end

@class KlarnaPaymentView;

/// An object that will be notified of events happening to a <code>KlarnaPaymentView</code>
/// If you’re integrating Klarna Payments natively, you’ll need to implement an instance of this
/// listener and initialize the <code>KlarnaPaymentView</code> with it.
/// warning:
/// Make sure you listen to to <code>klarnaFailed(inPaymentView:withError:)</code> for potential
/// fatal and non-fatal errors. If the error is not fatal, you can call the method again.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK26KlarnaPaymentEventListener_")
@protocol KlarnaPaymentEventListener
/// The <code>initialize()</code> function for this payment view was successful.
/// You can follow up by calling <code>load()</code> to render details for this method, or if this payment
/// method is already authorized, <code>loadPaymentReview()</code>.
/// \param paymentView The <code>KlarnaPaymentView</code> that was initialized.
///
- (void)klarnaInitializedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// The <code>load()</code> function for this payment view was successful.
/// Payment view should be visible now. If the user chooses to pay with the payment method in
/// this view, call <code>authorize()</code>.
/// \param paymentView The <code>KlarnaPaymentView</code> that was loaded.
///
- (void)klarnaLoadedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// The <code>loadPaymentReview()</code> function for this payment view was successful.
/// Payment view is rendering a description of what the payment method that was authorized.
/// \param paymentView The <code>KlarnaPaymentView</code> that renders a payment review.
///
- (void)klarnaLoadedPaymentReviewWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// An authorization was performed for the payment method in the payment view.
/// If you have an authorization token, you can create an order with your backend at this point.
/// note:
/// This method being called doesn’t necessarily mean that it was successful. You might need
/// to call <code>finalize()</code>, you might need to correct an error or there might be a fatal error.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the authorized payment method.
///
/// \param approved Is the session approved? If true, you should also get an <code>authToken</code>.
///
/// \param authToken Authorization token.
///
/// \param finalizeRequired If true, <code>finalize()</code> needs to be called.
///
- (void)klarnaAuthorizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken finalizeRequired:(BOOL)finalizeRequired;
/// A reauthorization was performed for the payment method in the payment view.
/// If you have an authorization token, you can create an order with your backend at this point.
/// If the order is changed after this point. Call the view’s <code>reauthorize()</code> instead
/// of calling <code>authorize()</code> again.
/// note:
/// This method being called doesn’t mean that it was necessarily successful. If <code>klarnaAuthorized()</code>
/// previously returned true for <code>finalizeRequired</code>, you need to still call <code>finalize()</code>. There
/// might also be an error.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the reauthorized payment method.
///
/// \param approved Is the session reapproved? If true, you should also get a new <code>authToken</code>.
///
/// \param authToken Authorization token. You can use this to create an order.
///
- (void)klarnaReauthorizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken;
/// The session for the payment method in this view has performed a finalize.
/// If it’s approved and you have an authorization token, you can create an order.
/// note:
/// You need to check for the <code>authToken</code> to make sure the session is finalized.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the finalized payment method.
///
/// \param approved Is the session reapproved? If true, you should also get a new <code>authToken</code>.
///
/// \param authToken Authorization token. You can use this to create an order.
///
- (void)klarnaFinalizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken;
/// Called when a Payment View resized internally.
/// Update your constraints (or whatever solution you have) to match the layout.
/// \param paymentView The <code>KlarnaPaymentView</code> that resized.
///
/// \param newHeight The new height in points.
///
- (void)klarnaResizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView to:(CGFloat)newHeight;
/// Called if an error occured during some part of the flow.
/// If the error’s <code>invalidFields</code> property contains field names and the error isn’t fatal, you can:
/// <ol>
///   <li>
///     Prompt the user to get updated info for those fields.
///   </li>
///   <li>
///     Call the same method with those updated fields as additional data.
///   </li>
/// </ol>
/// warning:
/// Errors may or may not be fatal. If the error is fatal the <code>KlarnaPaymentView</code> should not be
/// displayed anymore.
/// \param paymentView The <code>KlarnaPaymentView</code> that the error occured in.
///
/// \param error Error that occurred.
///
- (void)klarnaFailedInPaymentView:(KlarnaPaymentView * _Nonnull)paymentView withError:(KlarnaPaymentError * _Nonnull)error;
@end

@class NSCoder;

SWIFT_CLASS("_TtC15KlarnaMobileSDK17KlarnaPaymentView")
@interface KlarnaPaymentView : UIView
/// Mark <code>init(frame:)</code> as <code>private</code> to prevent it being used to initialize the payment view.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


@interface KlarnaPaymentView (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Payment method category this view will be / is displaying.
@property (nonatomic, readonly, copy) NSString * _Nonnull category;
/// Informs whether this <code>KlarnaPaymentView</code> should be displayed to the customer.
/// True by default. Once it becomes false, it will not become true again.
@property (nonatomic, readonly) BOOL isLoaded;
/// Informs whether this PaymentView’s content is loaded.
/// Will be false until a successful load() call has been performed.
@property (nonatomic, readonly) BOOL isAvalable;
/// Create a Klarna Payment View
/// note:
///
/// Klarna payment view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// note:
///
/// When the payment view is initialized, this initializer <em>wont</em> call <code>initialize()</code>
/// automatically. You need to call initialize yourself.
/// \param category Category of payment methods to be loaded.
///
/// \param delegate A listener object that will receive events from this view.
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category eventListener:(id <KlarnaPaymentEventListener> _Nonnull)eventListener;
/// Initialize the <code>KlarnaPaymentView</code>.
/// note:
///
/// <em>Only</em> call this separately when you get a <code>invalidClientToken</code> error.
/// \param clientToken Client token received from Klarna when creating the session.
///
/// \param returnUrl Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
- (void)initializeWithClientToken:(NSString * _Nonnull)clientToken returnUrl:(NSURL * _Nonnull)returnUrl;
/// Performs a pre-assessment for this payment method category. Loads content into the
/// <code>KlarnaPaymentView</code>.
/// note:
///
/// Any existing content in the view (e.g. if you already called <code>load()</code> before) will be
/// replaced.
/// \param jsonData An optional string with order data to update the session. Formatted as JSON.
///
- (void)loadWithJsonData:(NSString * _Nullable)jsonData;
/// Renders an overview of the payment terms that have been authorized.
/// If your checkout offers the customer an opportunity to review the order after the payment
/// step (e.g. an order review page) it can make sense to present the payment method the customer
/// selected on a previous page.
/// This gives the customer a change to review the payment method and its terms to the user.
/// note:
///
/// Any existing content in the view (e.g. if you already called <code>load()</code> before) will be
/// replaced.
/// note:
///
/// Currently only specific payment methods and countries may be supported.
/// warning:
///
/// The session should be authorized.
- (void)loadPaymentReview;
/// Authorizes the session and evaluates whether an order can be created.
/// Merchant’s delegate will be called with successful/unsuccessful result of authorization.
/// \param autoFinalize An optional flag used to turn off auto-finalization for the direct bank transfer payment method.
///
/// \param jsonData An optional string to update the session. Formatted as JSON.
///
- (void)authorizeWithAutoFinalize:(BOOL)autoFinalize jsonData:(NSString * _Nullable)jsonData;
/// Reauthorizes the session.
/// Call this if session details (order or customer info) have changed after authorization.
/// Merchant’s delegate will be called with successful/unsuccessful result of reauthorization.
/// \param jsonData An optional json string to update the session.
///
- (void)reauthorizeWithJsonData:(NSString * _Nullable)jsonData;
/// Finalizes the session.
/// Call this if you called <code>authorize()</code> with <code>autoFinalize</code> set to <code>false</code> and results in
/// <code>finalizeRequired</code> with a <code>true</code> value.
/// Merchant’s delegate will be called with successful/unsuccessful result of finalization.
/// note:
///
/// Method is called <code>finalise</code> with an “s” to avoid conflicts with the <code>NSObject</code> method of
/// the same name.
/// \param jsonData An optional string to update the session. Formatted as JSON.
///
- (void)finaliseWithJsonData:(NSString * _Nullable)jsonData;
@end


/// General class that envelops WKWebView
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK13KlarnaWebView_")
@protocol KlarnaWebView
@end





@class UIImage;
@class AVCaptureOutput;
@class AVCaptureConnection;
@class NSBundle;

SWIFT_CLASS("_TtC15KlarnaMobileSDK22ScanBaseViewController")
@interface ScanBaseViewController : UIViewController <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)onScannedCardWithNumber:(NSString * _Nonnull)number expiryYear:(NSString * _Nullable)expiryYear expiryMonth:(NSString * _Nullable)expiryMonth scannedImage:(UIImage * _Nullable)scannedImage;
- (void)showCardNumber:(NSString * _Nonnull)number expiry:(NSString * _Nullable)expiry;
- (void)onCameraPermissionDeniedWithShowedPrompt:(BOOL)showedPrompt;
- (BOOL)useCurrentFrameNumberWithErrorCorrectedNumber:(NSString * _Nullable)errorCorrectedNumber currentFrameNumber:(NSString * _Nonnull)currentFrameNumber SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class UIColor;

SWIFT_CLASS("_TtC15KlarnaMobileSDK21UIDotLoadingIndicator")
@interface UIDotLoadingIndicator : UIView
@property (nonatomic) IBInspectable NSInteger dotsCount;
@property (nonatomic) IBInspectable CGFloat dotsRadius;
@property (nonatomic) IBInspectable CGFloat dotsSpacing;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end
























@interface WKWebView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaWebView>
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KlarnaMobileSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@protocol KlarnaWebView;
@class KlarnaMobileSDKError;

/// An object that will be notified of events happening to the web views <code>KlarnaHybridSDK</code> instance
/// is observing.
/// If you’re performinga hybrid integration, you’ll need to implement an instance of this
/// listener and initialize the <code>KlarnaHybridSDK</code> with it.
/// warning:
/// Make sure you listen to to <code>klarnaFailed(inWebView:withError:)</code> for potential
/// fatal and non-fatal errors. If the error is not fatal, you can call the method again.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK25KlarnaHybridEventListener_")
@protocol KlarnaHybridEventListener
/// Event to notify the merchant app that the supplied web view will present full-screen content
/// that it should be displayed in a full-screen format.
/// \param webView Web view to be presented in fullscreen.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaWillShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify the merchant app that full-screen content in the supplied web view is now
/// being displayed.
/// \param webView Web view that has presented full-screen content.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaDidShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify the merchant’s app that the full-screen content in the following web view
/// will be removed, and the “original” contents will be displayed.
/// \param webView Web view to be restored to original presentation.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaWillHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify merchant that the full-screen content in the web view has been removed and
/// it’s now displaying content in its orignal presentation.
/// \param webView Web biew presenting content in original format.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaDidHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify merchant that an error occured during Hybrid SDK’s usage.
/// \param webView The web view the error occured in.
///
/// \param error Error details.
///
- (void)klarnaFailedInWebView:(id <KlarnaWebView> _Nonnull)webView withError:(KlarnaMobileSDKError * _Nonnull)error;
@end


/// Klarna’s approach to integrating products with a “hybrid” approach: One in which Klarna’s
/// products are presented inside a merchant-owned web view.
SWIFT_CLASS("_TtC15KlarnaMobileSDK15KlarnaHybridSDK")
@interface KlarnaHybridSDK : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol KlarnaHybridSDKEventListener;

@interface KlarnaHybridSDK (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// warning:
/// This initializer is deprecated. Use the new one and just initialize the SDK and
/// add the web view you’ll be using.
/// \param webView A web view (<code>WKWebView</code>) for Klarna’s SDK to operate on.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener that will receive events from the SDK.
///
- (nonnull instancetype)initWithWebView:(id <KlarnaWebView> _Nonnull)webView returnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaHybridSDKEventListener> _Nonnull)eventListener SWIFT_DEPRECATED_MSG("Use the new initializer instead.");
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener that will receive events from the SDK.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaHybridEventListener> _Nonnull)eventListener;
/// Adds a web view that the SDK will keep track of until either the web view or the SDK is
/// dereferenced.
/// You may add multiple web views to the same instance.
/// \param webView Web view that the SDK will keep track of (<code>WKWebView</code>).
///
- (void)addWebView:(id <KlarnaWebView> _Nonnull)webView;
/// Notify the SDK that a new page will load in the provided web view.
/// Call should be perfomed in:
/// <code>webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</code>.
/// \param webView Web view that the SDK will check (<code>WKWebView</code>).
///
- (void)newPageLoadIn:(id <KlarnaWebView> _Nonnull)webView;
/// Notify the SDK that a new page will load in the provided web view.
/// warning:
/// Use <code>newPageLoad</code> from this same class instead.
/// \param webView Web view that the SDK will check (<code>WKWebView</code>).
///
- (void)newPageWillLoadIn:(id <KlarnaWebView> _Nonnull)webView SWIFT_DEPRECATED_MSG("Use the `newPageLoad` instead.");
/// Verify with the SDK whether a request/navigation should be performed in the web view.
/// Checking should be perfomed in:
/// <code>webView(_: decidePolicyFor: decisionHandler:)</code> with the <code>navigationAction</code>’s <code>request</code> property.
/// note:
///
/// If it is a page Klarna recognizes as one of its own (e.g. Klarna’s financing terms), the SDK
/// will return <code>false</code>. You should then block this navigation.
/// If it’s a page Klarna doesn’t recognize, it’ll fall back to returning <code>true</code>. Your app should
/// determine whether it wants to load the URL through its own heuristics.
/// \param request Request the web view will be performing.
///
///
/// returns:
/// Whether the SDK deems that this navigation should be blocked or not.
- (BOOL)shouldFollowNavigationWithRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the SDK’s Device ID for the app install.
/// warning:
/// This method is deprecated. Use the static method from <code>KlarnaMobileSDK</code> with the
/// same name.
///
/// returns:
/// a unique ID, persistent throughout the app’s installation.
+ (NSString * _Nonnull)deviceIdentifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use the method of the same name on KlarnaMobileSDK instead.");
/// To be called when the application is re-opened from a third-party application while the SDK
/// is running.
/// warning:
/// This method is deprecated. The SDK does not require it anymore.
/// \param url URL that is passed in through deep link.
///
/// \param options Additional system-provided parameters (like source application bundle ID)
///
+ (void)handleDeeplinkWithUrl:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options SWIFT_DEPRECATED_MSG("SDK does not need this to be called anymore. Will be removed in future releases.");
@end


/// Your app should listen to SDK events in the from the Hybrid SDK by implementing this protocol.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK28KlarnaHybridSDKEventListener_") SWIFT_DEPRECATED_MSG("Use KlarnaHybridEventListener instead.")
@protocol KlarnaHybridSDKEventListener
/// Event to notify the merchant app that the following web view will present content that
/// should be displayed in a full-screen format.
/// \param webView Web view to be presented in fullscreen.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaHybridSDKWillShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify the merchant app merchant that content that should be presented in
/// full-screen has been displayed.
/// \param webView Web view that has presented full-screen content.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaHybridSDKDidShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify the merchant’s app that the full-screen content in the following web view
/// will be removed, and the “original” contents will be displayed.
/// \param webView Web view to be restored to original presentation.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaHybridSDKWillHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify merchant that the full-screen content in the web view has been removed and
/// it is now displaying “regular” content.
/// \param webView Web View presenting original content.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaHybridSDKDidHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify merchant that an error occured during Hybrid SDK usage.
/// \param webView on which webview the failure happened.
///
/// \param error detail error.
///
- (void)klarnaHybridSDKFailedInWebView:(id <KlarnaWebView> _Nonnull)webView withError:(KlarnaMobileSDKError * _Nonnull)error;
@end

/// Level of logging to system console.
typedef SWIFT_ENUM(NSInteger, KlarnaLoggingLevel, closed) {
/// No logging will occur.
  KlarnaLoggingLevelOff = 0,
/// Errors will be logged. Default.
  KlarnaLoggingLevelError = 1,
/// All messages will be logged.
  KlarnaLoggingLevelVerbose = 2,
};


/// The top level interface for the SDK and all of its components.
/// Common methods for all integrations are provided here.
SWIFT_CLASS("_TtC15KlarnaMobileSDK21KlarnaMobileSDKCommon")
@interface KlarnaMobileSDKCommon : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Set logging level for all SDK integrations.
/// You can observe these logs either through XCode or the MacOS console.
/// The default logging level is <code>error</code>.
/// \param loggingLevel Console log output level.
///
+ (void)setLoggingLevel:(enum KlarnaLoggingLevel)loggingLevel;
/// Provides a device identifier for an app.
/// The string it returns remains constant during the app’s lifetime on the app. The value does
/// not change on updates, but will change on re-installs.
/// The string is a UUID following the RFC 4122 version 4 standard.
///
/// returns:
/// A unique persisted ID string.
+ (NSString * _Nonnull)deviceIdentifier SWIFT_WARN_UNUSED_RESULT;
@end


/// Describes a generic error that occurred within the SDK.
SWIFT_CLASS("_TtC15KlarnaMobileSDK20KlarnaMobileSDKError")
@interface KlarnaMobileSDKError : NSObject
/// Unique name identifying this error.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Description of the error.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Describes whether this error is fatal. This means some part of the flow failed permanently.
@property (nonatomic, readonly) BOOL isFatal;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An SDK error specific to the Klarna Payments component.
SWIFT_CLASS("_TtC15KlarnaMobileSDK18KlarnaPaymentError")
@interface KlarnaPaymentError : KlarnaMobileSDKError
/// If an error isn’t fatal, the SDK will inform you of what fields need to be addressed.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable invalidFields;
/// Action the error occurred during.
@property (nonatomic, readonly, copy) NSString * _Nonnull action;
@end

@class KlarnaPaymentView;

/// An object that will be notified of events happening to a <code>KlarnaPaymentView</code>
/// If you’re integrating Klarna Payments natively, you’ll need to implement an instance of this
/// listener and initialize the <code>KlarnaPaymentView</code> with it.
/// warning:
/// Make sure you listen to to <code>klarnaFailed(inPaymentView:withError:)</code> for potential
/// fatal and non-fatal errors. If the error is not fatal, you can call the method again.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK26KlarnaPaymentEventListener_")
@protocol KlarnaPaymentEventListener
/// The <code>initialize()</code> function for this payment view was successful.
/// You can follow up by calling <code>load()</code> to render details for this method, or if this payment
/// method is already authorized, <code>loadPaymentReview()</code>.
/// \param paymentView The <code>KlarnaPaymentView</code> that was initialized.
///
- (void)klarnaInitializedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// The <code>load()</code> function for this payment view was successful.
/// Payment view should be visible now. If the user chooses to pay with the payment method in
/// this view, call <code>authorize()</code>.
/// \param paymentView The <code>KlarnaPaymentView</code> that was loaded.
///
- (void)klarnaLoadedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// The <code>loadPaymentReview()</code> function for this payment view was successful.
/// Payment view is rendering a description of what the payment method that was authorized.
/// \param paymentView The <code>KlarnaPaymentView</code> that renders a payment review.
///
- (void)klarnaLoadedPaymentReviewWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// An authorization was performed for the payment method in the payment view.
/// If you have an authorization token, you can create an order with your backend at this point.
/// note:
/// This method being called doesn’t necessarily mean that it was successful. You might need
/// to call <code>finalize()</code>, you might need to correct an error or there might be a fatal error.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the authorized payment method.
///
/// \param approved Is the session approved? If true, you should also get an <code>authToken</code>.
///
/// \param authToken Authorization token.
///
/// \param finalizeRequired If true, <code>finalize()</code> needs to be called.
///
- (void)klarnaAuthorizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken finalizeRequired:(BOOL)finalizeRequired;
/// A reauthorization was performed for the payment method in the payment view.
/// If you have an authorization token, you can create an order with your backend at this point.
/// If the order is changed after this point. Call the view’s <code>reauthorize()</code> instead
/// of calling <code>authorize()</code> again.
/// note:
/// This method being called doesn’t mean that it was necessarily successful. If <code>klarnaAuthorized()</code>
/// previously returned true for <code>finalizeRequired</code>, you need to still call <code>finalize()</code>. There
/// might also be an error.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the reauthorized payment method.
///
/// \param approved Is the session reapproved? If true, you should also get a new <code>authToken</code>.
///
/// \param authToken Authorization token. You can use this to create an order.
///
- (void)klarnaReauthorizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken;
/// The session for the payment method in this view has performed a finalize.
/// If it’s approved and you have an authorization token, you can create an order.
/// note:
/// You need to check for the <code>authToken</code> to make sure the session is finalized.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the finalized payment method.
///
/// \param approved Is the session reapproved? If true, you should also get a new <code>authToken</code>.
///
/// \param authToken Authorization token. You can use this to create an order.
///
- (void)klarnaFinalizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken;
/// Called when a Payment View resized internally.
/// Update your constraints (or whatever solution you have) to match the layout.
/// \param paymentView The <code>KlarnaPaymentView</code> that resized.
///
/// \param newHeight The new height in points.
///
- (void)klarnaResizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView to:(CGFloat)newHeight;
/// Called if an error occured during some part of the flow.
/// If the error’s <code>invalidFields</code> property contains field names and the error isn’t fatal, you can:
/// <ol>
///   <li>
///     Prompt the user to get updated info for those fields.
///   </li>
///   <li>
///     Call the same method with those updated fields as additional data.
///   </li>
/// </ol>
/// warning:
/// Errors may or may not be fatal. If the error is fatal the <code>KlarnaPaymentView</code> should not be
/// displayed anymore.
/// \param paymentView The <code>KlarnaPaymentView</code> that the error occured in.
///
/// \param error Error that occurred.
///
- (void)klarnaFailedInPaymentView:(KlarnaPaymentView * _Nonnull)paymentView withError:(KlarnaPaymentError * _Nonnull)error;
@end

@class NSCoder;

SWIFT_CLASS("_TtC15KlarnaMobileSDK17KlarnaPaymentView")
@interface KlarnaPaymentView : UIView
/// Mark <code>init(frame:)</code> as <code>private</code> to prevent it being used to initialize the payment view.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


@interface KlarnaPaymentView (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Payment method category this view will be / is displaying.
@property (nonatomic, readonly, copy) NSString * _Nonnull category;
/// Informs whether this <code>KlarnaPaymentView</code> should be displayed to the customer.
/// True by default. Once it becomes false, it will not become true again.
@property (nonatomic, readonly) BOOL isLoaded;
/// Informs whether this PaymentView’s content is loaded.
/// Will be false until a successful load() call has been performed.
@property (nonatomic, readonly) BOOL isAvalable;
/// Create a Klarna Payment View
/// note:
///
/// Klarna payment view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// note:
///
/// When the payment view is initialized, this initializer <em>wont</em> call <code>initialize()</code>
/// automatically. You need to call initialize yourself.
/// \param category Category of payment methods to be loaded.
///
/// \param delegate A listener object that will receive events from this view.
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category eventListener:(id <KlarnaPaymentEventListener> _Nonnull)eventListener;
/// Initialize the <code>KlarnaPaymentView</code>.
/// note:
///
/// <em>Only</em> call this separately when you get a <code>invalidClientToken</code> error.
/// \param clientToken Client token received from Klarna when creating the session.
///
/// \param returnUrl Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
- (void)initializeWithClientToken:(NSString * _Nonnull)clientToken returnUrl:(NSURL * _Nonnull)returnUrl;
/// Performs a pre-assessment for this payment method category. Loads content into the
/// <code>KlarnaPaymentView</code>.
/// note:
///
/// Any existing content in the view (e.g. if you already called <code>load()</code> before) will be
/// replaced.
/// \param jsonData An optional string with order data to update the session. Formatted as JSON.
///
- (void)loadWithJsonData:(NSString * _Nullable)jsonData;
/// Renders an overview of the payment terms that have been authorized.
/// If your checkout offers the customer an opportunity to review the order after the payment
/// step (e.g. an order review page) it can make sense to present the payment method the customer
/// selected on a previous page.
/// This gives the customer a change to review the payment method and its terms to the user.
/// note:
///
/// Any existing content in the view (e.g. if you already called <code>load()</code> before) will be
/// replaced.
/// note:
///
/// Currently only specific payment methods and countries may be supported.
/// warning:
///
/// The session should be authorized.
- (void)loadPaymentReview;
/// Authorizes the session and evaluates whether an order can be created.
/// Merchant’s delegate will be called with successful/unsuccessful result of authorization.
/// \param autoFinalize An optional flag used to turn off auto-finalization for the direct bank transfer payment method.
///
/// \param jsonData An optional string to update the session. Formatted as JSON.
///
- (void)authorizeWithAutoFinalize:(BOOL)autoFinalize jsonData:(NSString * _Nullable)jsonData;
/// Reauthorizes the session.
/// Call this if session details (order or customer info) have changed after authorization.
/// Merchant’s delegate will be called with successful/unsuccessful result of reauthorization.
/// \param jsonData An optional json string to update the session.
///
- (void)reauthorizeWithJsonData:(NSString * _Nullable)jsonData;
/// Finalizes the session.
/// Call this if you called <code>authorize()</code> with <code>autoFinalize</code> set to <code>false</code> and results in
/// <code>finalizeRequired</code> with a <code>true</code> value.
/// Merchant’s delegate will be called with successful/unsuccessful result of finalization.
/// note:
///
/// Method is called <code>finalise</code> with an “s” to avoid conflicts with the <code>NSObject</code> method of
/// the same name.
/// \param jsonData An optional string to update the session. Formatted as JSON.
///
- (void)finaliseWithJsonData:(NSString * _Nullable)jsonData;
@end


/// General class that envelops WKWebView
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK13KlarnaWebView_")
@protocol KlarnaWebView
@end





@class UIImage;
@class AVCaptureOutput;
@class AVCaptureConnection;
@class NSBundle;

SWIFT_CLASS("_TtC15KlarnaMobileSDK22ScanBaseViewController")
@interface ScanBaseViewController : UIViewController <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)onScannedCardWithNumber:(NSString * _Nonnull)number expiryYear:(NSString * _Nullable)expiryYear expiryMonth:(NSString * _Nullable)expiryMonth scannedImage:(UIImage * _Nullable)scannedImage;
- (void)showCardNumber:(NSString * _Nonnull)number expiry:(NSString * _Nullable)expiry;
- (void)onCameraPermissionDeniedWithShowedPrompt:(BOOL)showedPrompt;
- (BOOL)useCurrentFrameNumberWithErrorCorrectedNumber:(NSString * _Nullable)errorCorrectedNumber currentFrameNumber:(NSString * _Nonnull)currentFrameNumber SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class UIColor;

SWIFT_CLASS("_TtC15KlarnaMobileSDK21UIDotLoadingIndicator")
@interface UIDotLoadingIndicator : UIView
@property (nonatomic) IBInspectable NSInteger dotsCount;
@property (nonatomic) IBInspectable CGFloat dotsRadius;
@property (nonatomic) IBInspectable CGFloat dotsSpacing;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end
























@interface WKWebView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaWebView>
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="KlarnaMobileSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



@protocol KlarnaWebView;
@class KlarnaMobileSDKError;

/// An object that will be notified of events happening to the web views <code>KlarnaHybridSDK</code> instance
/// is observing.
/// If you’re performinga hybrid integration, you’ll need to implement an instance of this
/// listener and initialize the <code>KlarnaHybridSDK</code> with it.
/// warning:
/// Make sure you listen to to <code>klarnaFailed(inWebView:withError:)</code> for potential
/// fatal and non-fatal errors. If the error is not fatal, you can call the method again.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK25KlarnaHybridEventListener_")
@protocol KlarnaHybridEventListener
/// Event to notify the merchant app that the supplied web view will present full-screen content
/// that it should be displayed in a full-screen format.
/// \param webView Web view to be presented in fullscreen.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaWillShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify the merchant app that full-screen content in the supplied web view is now
/// being displayed.
/// \param webView Web view that has presented full-screen content.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaDidShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify the merchant’s app that the full-screen content in the following web view
/// will be removed, and the “original” contents will be displayed.
/// \param webView Web view to be restored to original presentation.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaWillHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify merchant that the full-screen content in the web view has been removed and
/// it’s now displaying content in its orignal presentation.
/// \param webView Web biew presenting content in original format.
///
/// \param completionHandler A callback the merchant should call to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaDidHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Event to notify merchant that an error occured during Hybrid SDK’s usage.
/// \param webView The web view the error occured in.
///
/// \param error Error details.
///
- (void)klarnaFailedInWebView:(id <KlarnaWebView> _Nonnull)webView withError:(KlarnaMobileSDKError * _Nonnull)error;
@end


/// Klarna’s approach to integrating products with a “hybrid” approach: One in which Klarna’s
/// products are presented inside a merchant-owned web view.
SWIFT_CLASS("_TtC15KlarnaMobileSDK15KlarnaHybridSDK")
@interface KlarnaHybridSDK : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol KlarnaHybridSDKEventListener;

@interface KlarnaHybridSDK (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// warning:
/// This initializer is deprecated. Use the new one and just initialize the SDK and
/// add the web view you’ll be using.
/// \param webView A web view (<code>WKWebView</code>) for Klarna’s SDK to operate on.
///
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener that will receive events from the SDK.
///
- (nonnull instancetype)initWithWebView:(id <KlarnaWebView> _Nonnull)webView returnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaHybridSDKEventListener> _Nonnull)eventListener SWIFT_DEPRECATED_MSG("Use the new initializer instead.");
/// Initialize the Klarna Mobile SDK in hybrid mode.
/// note:
/// After initializing the SDK, you’ll need to add the web view that the SDK will track.
/// \param returnUrl Your app’s custom URL scheme, specified in your app’s <code>CFBundleURLSchemes</code> field in the Info.plist.
///
/// \param eventListener A listener that will receive events from the SDK.
///
- (nonnull instancetype)initWithReturnUrl:(NSURL * _Nonnull)returnUrl eventListener:(id <KlarnaHybridEventListener> _Nonnull)eventListener;
/// Adds a web view that the SDK will keep track of until either the web view or the SDK is
/// dereferenced.
/// You may add multiple web views to the same instance.
/// \param webView Web view that the SDK will keep track of (<code>WKWebView</code>).
///
- (void)addWebView:(id <KlarnaWebView> _Nonnull)webView;
/// Notify the SDK that a new page will load in the provided web view.
/// Call should be perfomed in:
/// <code>webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!)</code>.
/// \param webView Web view that the SDK will check (<code>WKWebView</code>).
///
- (void)newPageLoadIn:(id <KlarnaWebView> _Nonnull)webView;
/// Notify the SDK that a new page will load in the provided web view.
/// warning:
/// Use <code>newPageLoad</code> from this same class instead.
/// \param webView Web view that the SDK will check (<code>WKWebView</code>).
///
- (void)newPageWillLoadIn:(id <KlarnaWebView> _Nonnull)webView SWIFT_DEPRECATED_MSG("Use the `newPageLoad` instead.");
/// Verify with the SDK whether a request/navigation should be performed in the web view.
/// Checking should be perfomed in:
/// <code>webView(_: decidePolicyFor: decisionHandler:)</code> with the <code>navigationAction</code>’s <code>request</code> property.
/// note:
///
/// If it is a page Klarna recognizes as one of its own (e.g. Klarna’s financing terms), the SDK
/// will return <code>false</code>. You should then block this navigation.
/// If it’s a page Klarna doesn’t recognize, it’ll fall back to returning <code>true</code>. Your app should
/// determine whether it wants to load the URL through its own heuristics.
/// \param request Request the web view will be performing.
///
///
/// returns:
/// Whether the SDK deems that this navigation should be blocked or not.
- (BOOL)shouldFollowNavigationWithRequest:(NSURLRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the SDK’s Device ID for the app install.
/// warning:
/// This method is deprecated. Use the static method from <code>KlarnaMobileSDK</code> with the
/// same name.
///
/// returns:
/// a unique ID, persistent throughout the app’s installation.
+ (NSString * _Nonnull)deviceIdentifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use the method of the same name on KlarnaMobileSDK instead.");
/// To be called when the application is re-opened from a third-party application while the SDK
/// is running.
/// warning:
/// This method is deprecated. The SDK does not require it anymore.
/// \param url URL that is passed in through deep link.
///
/// \param options Additional system-provided parameters (like source application bundle ID)
///
+ (void)handleDeeplinkWithUrl:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options SWIFT_DEPRECATED_MSG("SDK does not need this to be called anymore. Will be removed in future releases.");
@end


/// Your app should listen to SDK events in the from the Hybrid SDK by implementing this protocol.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK28KlarnaHybridSDKEventListener_") SWIFT_DEPRECATED_MSG("Use KlarnaHybridEventListener instead.")
@protocol KlarnaHybridSDKEventListener
/// Event to notify the merchant app that the following web view will present content that
/// should be displayed in a full-screen format.
/// \param webView Web view to be presented in fullscreen.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaHybridSDKWillShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify the merchant app merchant that content that should be presented in
/// full-screen has been displayed.
/// \param webView Web view that has presented full-screen content.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete.
///
- (void)klarnaHybridSDKDidShowFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify the merchant’s app that the full-screen content in the following web view
/// will be removed, and the “original” contents will be displayed.
/// \param webView Web view to be restored to original presentation.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaHybridSDKWillHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify merchant that the full-screen content in the web view has been removed and
/// it is now displaying “regular” content.
/// \param webView Web View presenting original content.
///
/// \param completion A callback the merchant should use to let the Hybrid SDK know when any
/// actions addressing this event are complete
///
- (void)klarnaHybridSDKDidHideFullscreenInWebView:(id <KlarnaWebView> _Nonnull)webView completion:(void (^ _Nonnull)(void))completion;
/// Event to notify merchant that an error occured during Hybrid SDK usage.
/// \param webView on which webview the failure happened.
///
/// \param error detail error.
///
- (void)klarnaHybridSDKFailedInWebView:(id <KlarnaWebView> _Nonnull)webView withError:(KlarnaMobileSDKError * _Nonnull)error;
@end

/// Level of logging to system console.
typedef SWIFT_ENUM(NSInteger, KlarnaLoggingLevel, closed) {
/// No logging will occur.
  KlarnaLoggingLevelOff = 0,
/// Errors will be logged. Default.
  KlarnaLoggingLevelError = 1,
/// All messages will be logged.
  KlarnaLoggingLevelVerbose = 2,
};


/// The top level interface for the SDK and all of its components.
/// Common methods for all integrations are provided here.
SWIFT_CLASS("_TtC15KlarnaMobileSDK21KlarnaMobileSDKCommon")
@interface KlarnaMobileSDKCommon : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Set logging level for all SDK integrations.
/// You can observe these logs either through XCode or the MacOS console.
/// The default logging level is <code>error</code>.
/// \param loggingLevel Console log output level.
///
+ (void)setLoggingLevel:(enum KlarnaLoggingLevel)loggingLevel;
/// Provides a device identifier for an app.
/// The string it returns remains constant during the app’s lifetime on the app. The value does
/// not change on updates, but will change on re-installs.
/// The string is a UUID following the RFC 4122 version 4 standard.
///
/// returns:
/// A unique persisted ID string.
+ (NSString * _Nonnull)deviceIdentifier SWIFT_WARN_UNUSED_RESULT;
@end


/// Describes a generic error that occurred within the SDK.
SWIFT_CLASS("_TtC15KlarnaMobileSDK20KlarnaMobileSDKError")
@interface KlarnaMobileSDKError : NSObject
/// Unique name identifying this error.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Description of the error.
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
/// Describes whether this error is fatal. This means some part of the flow failed permanently.
@property (nonatomic, readonly) BOOL isFatal;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An SDK error specific to the Klarna Payments component.
SWIFT_CLASS("_TtC15KlarnaMobileSDK18KlarnaPaymentError")
@interface KlarnaPaymentError : KlarnaMobileSDKError
/// If an error isn’t fatal, the SDK will inform you of what fields need to be addressed.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable invalidFields;
/// Action the error occurred during.
@property (nonatomic, readonly, copy) NSString * _Nonnull action;
@end

@class KlarnaPaymentView;

/// An object that will be notified of events happening to a <code>KlarnaPaymentView</code>
/// If you’re integrating Klarna Payments natively, you’ll need to implement an instance of this
/// listener and initialize the <code>KlarnaPaymentView</code> with it.
/// warning:
/// Make sure you listen to to <code>klarnaFailed(inPaymentView:withError:)</code> for potential
/// fatal and non-fatal errors. If the error is not fatal, you can call the method again.
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK26KlarnaPaymentEventListener_")
@protocol KlarnaPaymentEventListener
/// The <code>initialize()</code> function for this payment view was successful.
/// You can follow up by calling <code>load()</code> to render details for this method, or if this payment
/// method is already authorized, <code>loadPaymentReview()</code>.
/// \param paymentView The <code>KlarnaPaymentView</code> that was initialized.
///
- (void)klarnaInitializedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// The <code>load()</code> function for this payment view was successful.
/// Payment view should be visible now. If the user chooses to pay with the payment method in
/// this view, call <code>authorize()</code>.
/// \param paymentView The <code>KlarnaPaymentView</code> that was loaded.
///
- (void)klarnaLoadedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// The <code>loadPaymentReview()</code> function for this payment view was successful.
/// Payment view is rendering a description of what the payment method that was authorized.
/// \param paymentView The <code>KlarnaPaymentView</code> that renders a payment review.
///
- (void)klarnaLoadedPaymentReviewWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView;
/// An authorization was performed for the payment method in the payment view.
/// If you have an authorization token, you can create an order with your backend at this point.
/// note:
/// This method being called doesn’t necessarily mean that it was successful. You might need
/// to call <code>finalize()</code>, you might need to correct an error or there might be a fatal error.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the authorized payment method.
///
/// \param approved Is the session approved? If true, you should also get an <code>authToken</code>.
///
/// \param authToken Authorization token.
///
/// \param finalizeRequired If true, <code>finalize()</code> needs to be called.
///
- (void)klarnaAuthorizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken finalizeRequired:(BOOL)finalizeRequired;
/// A reauthorization was performed for the payment method in the payment view.
/// If you have an authorization token, you can create an order with your backend at this point.
/// If the order is changed after this point. Call the view’s <code>reauthorize()</code> instead
/// of calling <code>authorize()</code> again.
/// note:
/// This method being called doesn’t mean that it was necessarily successful. If <code>klarnaAuthorized()</code>
/// previously returned true for <code>finalizeRequired</code>, you need to still call <code>finalize()</code>. There
/// might also be an error.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the reauthorized payment method.
///
/// \param approved Is the session reapproved? If true, you should also get a new <code>authToken</code>.
///
/// \param authToken Authorization token. You can use this to create an order.
///
- (void)klarnaReauthorizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken;
/// The session for the payment method in this view has performed a finalize.
/// If it’s approved and you have an authorization token, you can create an order.
/// note:
/// You need to check for the <code>authToken</code> to make sure the session is finalized.
/// \param paymentView The <code>KlarnaPaymentView</code> rendering the finalized payment method.
///
/// \param approved Is the session reapproved? If true, you should also get a new <code>authToken</code>.
///
/// \param authToken Authorization token. You can use this to create an order.
///
- (void)klarnaFinalizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView approved:(BOOL)approved authToken:(NSString * _Nullable)authToken;
/// Called when a Payment View resized internally.
/// Update your constraints (or whatever solution you have) to match the layout.
/// \param paymentView The <code>KlarnaPaymentView</code> that resized.
///
/// \param newHeight The new height in points.
///
- (void)klarnaResizedWithPaymentView:(KlarnaPaymentView * _Nonnull)paymentView to:(CGFloat)newHeight;
/// Called if an error occured during some part of the flow.
/// If the error’s <code>invalidFields</code> property contains field names and the error isn’t fatal, you can:
/// <ol>
///   <li>
///     Prompt the user to get updated info for those fields.
///   </li>
///   <li>
///     Call the same method with those updated fields as additional data.
///   </li>
/// </ol>
/// warning:
/// Errors may or may not be fatal. If the error is fatal the <code>KlarnaPaymentView</code> should not be
/// displayed anymore.
/// \param paymentView The <code>KlarnaPaymentView</code> that the error occured in.
///
/// \param error Error that occurred.
///
- (void)klarnaFailedInPaymentView:(KlarnaPaymentView * _Nonnull)paymentView withError:(KlarnaPaymentError * _Nonnull)error;
@end

@class NSCoder;

SWIFT_CLASS("_TtC15KlarnaMobileSDK17KlarnaPaymentView")
@interface KlarnaPaymentView : UIView
/// Mark <code>init(frame:)</code> as <code>private</code> to prevent it being used to initialize the payment view.
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


@interface KlarnaPaymentView (SWIFT_EXTENSION(KlarnaMobileSDK))
/// Payment method category this view will be / is displaying.
@property (nonatomic, readonly, copy) NSString * _Nonnull category;
/// Informs whether this <code>KlarnaPaymentView</code> should be displayed to the customer.
/// True by default. Once it becomes false, it will not become true again.
@property (nonatomic, readonly) BOOL isLoaded;
/// Informs whether this PaymentView’s content is loaded.
/// Will be false until a successful load() call has been performed.
@property (nonatomic, readonly) BOOL isAvalable;
/// Create a Klarna Payment View
/// note:
///
/// Klarna payment view will be initialized with frame <code>.zero</code>,
/// auto layout is the recommended way to manage the view’s layout.
/// note:
///
/// When the payment view is initialized, this initializer <em>wont</em> call <code>initialize()</code>
/// automatically. You need to call initialize yourself.
/// \param category Category of payment methods to be loaded.
///
/// \param delegate A listener object that will receive events from this view.
///
- (nonnull instancetype)initWithCategory:(NSString * _Nonnull)category eventListener:(id <KlarnaPaymentEventListener> _Nonnull)eventListener;
/// Initialize the <code>KlarnaPaymentView</code>.
/// note:
///
/// <em>Only</em> call this separately when you get a <code>invalidClientToken</code> error.
/// \param clientToken Client token received from Klarna when creating the session.
///
/// \param returnUrl Your apps custom URL scheme <code>CFBundleURLSchemes</code>.
///
- (void)initializeWithClientToken:(NSString * _Nonnull)clientToken returnUrl:(NSURL * _Nonnull)returnUrl;
/// Performs a pre-assessment for this payment method category. Loads content into the
/// <code>KlarnaPaymentView</code>.
/// note:
///
/// Any existing content in the view (e.g. if you already called <code>load()</code> before) will be
/// replaced.
/// \param jsonData An optional string with order data to update the session. Formatted as JSON.
///
- (void)loadWithJsonData:(NSString * _Nullable)jsonData;
/// Renders an overview of the payment terms that have been authorized.
/// If your checkout offers the customer an opportunity to review the order after the payment
/// step (e.g. an order review page) it can make sense to present the payment method the customer
/// selected on a previous page.
/// This gives the customer a change to review the payment method and its terms to the user.
/// note:
///
/// Any existing content in the view (e.g. if you already called <code>load()</code> before) will be
/// replaced.
/// note:
///
/// Currently only specific payment methods and countries may be supported.
/// warning:
///
/// The session should be authorized.
- (void)loadPaymentReview;
/// Authorizes the session and evaluates whether an order can be created.
/// Merchant’s delegate will be called with successful/unsuccessful result of authorization.
/// \param autoFinalize An optional flag used to turn off auto-finalization for the direct bank transfer payment method.
///
/// \param jsonData An optional string to update the session. Formatted as JSON.
///
- (void)authorizeWithAutoFinalize:(BOOL)autoFinalize jsonData:(NSString * _Nullable)jsonData;
/// Reauthorizes the session.
/// Call this if session details (order or customer info) have changed after authorization.
/// Merchant’s delegate will be called with successful/unsuccessful result of reauthorization.
/// \param jsonData An optional json string to update the session.
///
- (void)reauthorizeWithJsonData:(NSString * _Nullable)jsonData;
/// Finalizes the session.
/// Call this if you called <code>authorize()</code> with <code>autoFinalize</code> set to <code>false</code> and results in
/// <code>finalizeRequired</code> with a <code>true</code> value.
/// Merchant’s delegate will be called with successful/unsuccessful result of finalization.
/// note:
///
/// Method is called <code>finalise</code> with an “s” to avoid conflicts with the <code>NSObject</code> method of
/// the same name.
/// \param jsonData An optional string to update the session. Formatted as JSON.
///
- (void)finaliseWithJsonData:(NSString * _Nullable)jsonData;
@end


/// General class that envelops WKWebView
SWIFT_PROTOCOL("_TtP15KlarnaMobileSDK13KlarnaWebView_")
@protocol KlarnaWebView
@end





@class UIImage;
@class AVCaptureOutput;
@class AVCaptureConnection;
@class NSBundle;

SWIFT_CLASS("_TtC15KlarnaMobileSDK22ScanBaseViewController")
@interface ScanBaseViewController : UIViewController <AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)onScannedCardWithNumber:(NSString * _Nonnull)number expiryYear:(NSString * _Nullable)expiryYear expiryMonth:(NSString * _Nullable)expiryMonth scannedImage:(UIImage * _Nullable)scannedImage;
- (void)showCardNumber:(NSString * _Nonnull)number expiry:(NSString * _Nullable)expiry;
- (void)onCameraPermissionDeniedWithShowedPrompt:(BOOL)showedPrompt;
- (BOOL)useCurrentFrameNumberWithErrorCorrectedNumber:(NSString * _Nullable)errorCorrectedNumber currentFrameNumber:(NSString * _Nonnull)currentFrameNumber SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@class UIColor;

SWIFT_CLASS("_TtC15KlarnaMobileSDK21UIDotLoadingIndicator")
@interface UIDotLoadingIndicator : UIView
@property (nonatomic) IBInspectable NSInteger dotsCount;
@property (nonatomic) IBInspectable CGFloat dotsRadius;
@property (nonatomic) IBInspectable CGFloat dotsSpacing;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end
























@interface WKWebView (SWIFT_EXTENSION(KlarnaMobileSDK)) <KlarnaWebView>
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#endif
